{"version":3,"sources":["clock/clock.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","state","clockRuning","clockTime","min","sec","milsec","clockPaused","clockInt","intervals","self","this","int","setInterval","mil","setState","clearInterval","lap","Date","now","laps","length","unshift","console","log","disp","Object","keys","map","val","strdisp","toString","join","replace","startActive","pauseActive","onClick","clearTime","className","pauseTime","startTime","createLap","ints","index","array","k","split","newint","oldint","s","key","idx","time","createTime","buttons","createButtons","createIntervals","Component","App","loaded","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RA0NeA,G,kBAnNb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,aAAa,EACbC,UAAW,CACTC,IAAK,EACLC,IAAK,EACLC,OAAQ,GAEVC,aAAa,EACbC,SAAU,KACVC,UAAW,IAZI,E,sHAuBjB,IAAIC,EAAOC,KAEPC,EAAMC,aAAY,WAEpB,IAAIT,EAAM,EAAGC,EAAM,EAAGS,EAAM,EACQ,IAAhCJ,EAAKT,MAAME,UAAUG,QACvBQ,EAAM,EAC2B,KAA7BJ,EAAKT,MAAME,UAAUE,KACvBA,EAAM,EACND,EAAMM,EAAKT,MAAME,UAAUC,KAAO,IAElCC,EAAMK,EAAKT,MAAME,UAAUE,KAAO,EAClCD,EAAMM,EAAKT,MAAME,UAAUC,OAG7BU,EAAMJ,EAAKT,MAAME,UAAUG,QAAU,EACrCD,EAAMK,EAAKT,MAAME,UAAUE,IAC3BD,EAAMM,EAAKT,MAAME,UAAUC,KAE7BM,EAAKK,SAAS,CACZZ,UAAW,CACTC,IAAKA,EACLC,IAAKA,EACLC,OAAQQ,GAEVZ,aAAa,EACbK,aAAa,MAzBA,KA4BjBI,KAAKI,SAAS,CACZP,SAAUI,M,kCAKZI,cAAcL,KAAKV,MAAMO,UACzBG,KAAKI,SAAS,CACZP,SAAU,KACVN,aAAa,EACbK,aAAa,M,kCAKfI,KAAKI,SAAS,CACZZ,UAAW,CACTC,IAAK,EACLC,IAAK,EACLC,OAAQ,GAEVG,UAAW,O,kCAKb,IAAIQ,EAAMN,KAAKV,MAAME,UACrBc,EAAG,IAAUC,KAAKC,MAClB,IAAIC,EAAOT,KAAKV,MAAMQ,UACtBQ,EAAG,IAAUG,EAAKC,OAAS,EAE3BD,EAAKE,QAAQL,GAGbN,KAAKI,SAAS,CACZN,UAAWW,IAEbG,QAAQC,IAAIb,KAAKV,MAAMQ,a,mCAGX,IAAD,OACPgB,EAAOC,OAAOC,KAAKhB,KAAKV,MAAME,WAAWyB,KAAI,SAAAC,GAC/C,GAAY,QAARA,GAAyB,QAARA,EAAe,CAClC,IAAIC,EAAU,EAAK7B,MAAME,UAAU0B,GAAKE,WAIxC,OAHID,EAAQT,OAAS,IACnBS,EAAU,IAAMA,GAEXA,MAERE,KAAK,OAIR,OAFAP,EAAOA,EAAKQ,QAAQ,YAAa,IAE1B,6BACJR,K,sCAIY,IAAD,OACd,GAAId,KAAKV,MAAMM,cAAgBI,KAAKV,MAAMC,YACxC,IAAIgC,EAAc,SACdC,EAAc,gBAEdD,EAAc,WACdC,EAAc,SAEpB,OAAO,6BACL,6BACE,4BAAQC,QAAS,kBAAM,EAAKC,aAAaC,UAAU,SAAnD,SACA,4BAAQF,QAAS,kBAAM,EAAKG,aAAaD,UAAS,gBAAWH,IAA7D,SACA,4BAAQC,QAAS,kBAAM,EAAKI,aAAaF,UAAS,gBAAWJ,IAA7D,UAEF,6BACE,4BAAQE,QAAS,kBAAM,EAAKK,aAAaH,UAAS,cAASH,IAA3D,W,wCAKa,IAAD,OACZO,EAAO/B,KAAKV,MAAMQ,UAAUmB,KAAI,SAAChB,EAAK+B,EAAOC,GAC/C,IAAInB,EAAOC,OAAOC,KAAKf,GAAKgB,KAAI,SAAAiB,GAC9B,GAAU,QAANA,GAAqB,QAANA,EAAa,CAC9B,IAAIf,EAAUlB,EAAIiC,GAAGd,WAIrB,OAHID,EAAQT,OAAS,IACnBS,EAAU,IAAMA,GAEXA,MAGRE,KAAK,OAERP,EAAOA,EAAKQ,QAAQ,YAAa,IAEjC,IAAIa,EAAQ,GAEZ,GAAIH,EAAQ,EAAG,CACb,IAAII,EAAS,EAAK9C,MAAMQ,UAAUkC,EAAQ,GACtCK,EAASpC,EAKbkC,EAAQpB,OAAOC,KAAKoB,GAAQnB,KAAI,SAAAiB,GAC9B,IAAII,EAAI,GASR,MARU,QAANJ,EACFI,GAAKF,EAAOF,GAAKG,EAAOH,IAAId,WACb,QAANc,EACTI,GAAKF,EAAOF,GAAKG,EAAOH,IAAId,WACb,WAANc,IACTI,GAAKF,EAAOF,GAAKG,EAAOH,IAAId,YAGvBkB,KACNjB,KAAK,OAERT,QAAQC,IAAIsB,GAGd,OAAO,yBAAKR,UAAU,UAAUY,IAAKtC,EAAIsC,KACvC,6BACGtC,EAAIuC,KAEP,6BACG1B,OAQP,OAAO,yBAAKa,UAAU,aACnBI,K,+BAMH,IAAIU,EAAOzC,KAAK0C,aACZC,EAAU3C,KAAK4C,gBACf9C,EAAYE,KAAK6C,kBAGrB,OACE,yBAAKlB,UAAU,cACb,yBAAKA,UAAU,cACZc,GAEH,yBAAKd,UAAU,iBACZgB,GAEH,yBAAKhB,UAAU,mBACZ7B,Q,GA9MSgD,cCqBLC,G,kBAjBb,WAAY1D,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACX0D,QAAQ,GAJO,E,sEASjB,OACE,yBAAKrB,UAAU,YACb,kBAAC,EAAD,W,GAbUmB,cCKEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6513d73a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Component } from 'react';\r\n\r\nimport './clock.css';\r\n\r\nclass Clock extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      clockRuning: false,\r\n      clockTime: {\r\n        min: 0,\r\n        sec: 0,\r\n        milsec: 0\r\n      },\r\n      clockPaused: true,\r\n      clockInt: null,\r\n      intervals: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.startTime();\r\n    //   setInterval(this.startTime, 100).bind(this);\r\n  }\r\n\r\n  startTime() {\r\n\r\n    var self = this;\r\n    let milsectime = 1 * 100;\r\n    var int = setInterval(function () {\r\n      // console.log(self.state);\r\n      let min = 0, sec = 0, mil = 0;\r\n      if (self.state.clockTime.milsec === 9) {\r\n        mil = 0;\r\n        if (self.state.clockTime.sec === 59) {\r\n          sec = 0\r\n          min = self.state.clockTime.min += 1;\r\n        } else {\r\n          sec = self.state.clockTime.sec += 1;\r\n          min = self.state.clockTime.min;\r\n        }\r\n      } else {\r\n        mil = self.state.clockTime.milsec += 1;\r\n        sec = self.state.clockTime.sec;\r\n        min = self.state.clockTime.min;\r\n      }\r\n      self.setState({\r\n        clockTime: {\r\n          min: min,\r\n          sec: sec,\r\n          milsec: mil\r\n        },\r\n        clockRuning: true,\r\n        clockPaused: false\r\n      });\r\n    }, milsectime);\r\n    this.setState({\r\n      clockInt: int\r\n    })\r\n  }\r\n\r\n  pauseTime() {\r\n    clearInterval(this.state.clockInt);\r\n    this.setState({\r\n      clockInt: null,\r\n      clockRuning: false,\r\n      clockPaused: true\r\n    })\r\n  }\r\n\r\n  clearTime() {\r\n    this.setState({\r\n      clockTime: {\r\n        min: 0,\r\n        sec: 0,\r\n        milsec: 0\r\n      },\r\n      intervals: []\r\n    });\r\n  }\r\n\r\n  createLap() {\r\n    let lap = this.state.clockTime;\r\n    lap['key'] = Date.now();\r\n    let laps = this.state.intervals;\r\n    lap['idx'] = laps.length + 1;\r\n\r\n    laps.unshift(lap);\r\n\r\n\r\n    this.setState({\r\n      intervals: laps\r\n    });\r\n    console.log(this.state.intervals);\r\n  }\r\n\r\n  createTime() {\r\n    let disp = Object.keys(this.state.clockTime).map(val => {\r\n      if (val !== 'key' && val !== 'idx') {\r\n        let strdisp = this.state.clockTime[val].toString();\r\n        if (strdisp.length < 2) {\r\n          strdisp = '0' + strdisp;\r\n        }\r\n        return strdisp;\r\n      }\r\n    }).join(' : ');\r\n\r\n    disp = disp.replace(/ :  : +$/g, '');\r\n\r\n    return <div>\r\n      {disp}\r\n    </div>\r\n  }\r\n\r\n  createButtons() {\r\n    if (this.state.clockPaused && !this.state.clockRuning) {\r\n      var startActive = \"active\";\r\n      var pauseActive = \"deactive\";\r\n    } else {\r\n      var startActive = \"deactive\"\r\n      var pauseActive = \"active\";\r\n    }\r\n    return <div>\r\n      <div>\r\n        <button onClick={() => this.clearTime()} className=\"reset\">reset</button>\r\n        <button onClick={() => this.pauseTime()} className={`pause ${pauseActive}`}>pause</button>\r\n        <button onClick={() => this.startTime()} className={`start ${startActive}`}>start</button>\r\n      </div>\r\n      <div>\r\n        <button onClick={() => this.createLap()} className={`lap ${pauseActive}`}>Lap</button>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  createIntervals() {\r\n    let ints = this.state.intervals.map((int, index, array) => {\r\n      let disp = Object.keys(int).map(k => {\r\n        if (k !== 'key' && k !== 'idx') {\r\n          let strdisp = int[k].toString();\r\n          if (strdisp.length < 2) {\r\n            strdisp = '0' + strdisp;\r\n          }\r\n          return strdisp;\r\n        }\r\n        // if \r\n      }).join(' : ');\r\n\r\n      disp = disp.replace(/ :  : +$/g, '');\r\n\r\n      let split = '';\r\n\r\n      if (index > 0) {\r\n        let newint = this.state.intervals[index - 1];\r\n        let oldint = int;\r\n\r\n        // console.log(this.state.intervals[index - 1])\r\n        // console.log(int)\r\n\r\n        split = Object.keys(newint).map(k => {\r\n          let s = ''\r\n          if (k === 'min') {\r\n            s = (newint[k] - oldint[k]).toString();\r\n          } else if (k === 'sec') {\r\n            s = (newint[k] - oldint[k]).toString();\r\n          } else if (k === 'milsec') {\r\n            s = (newint[k] - oldint[k]).toString();\r\n            // TODO - figure out split\r\n          }\r\n          return s;\r\n        }).join(' : ');\r\n\r\n        console.log(split)\r\n      }\r\n\r\n      return <div className=\"lap-int\" key={int.key}>\r\n        <div>\r\n          {int.idx}\r\n        </div>\r\n        <div>\r\n          {disp}\r\n        </div>\r\n        {/* <div>\r\n          {split}\r\n        </div> */}\r\n      </div>\r\n\r\n    });\r\n    return <div className=\"laps-ints\">\r\n      {ints}\r\n    </div>\r\n  }\r\n\r\n  render() {\r\n    //   this.startTime();\r\n    let time = this.createTime();\r\n    let buttons = this.createButtons();\r\n    let intervals = this.createIntervals();\r\n\r\n\r\n    return (\r\n      <div className=\"Clock-main\">\r\n        <div className=\"Clock-time\">\r\n          {time}\r\n        </div>\r\n        <div className=\"Clock-buttons\">\r\n          {buttons}\r\n        </div>\r\n        <div className=\"Clock-intervals\">\r\n          {intervals}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Clock;\r\n","import React from 'react';\nimport { Component } from 'react';\n\nimport Clock from './clock/clock.js'\n\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loaded: false\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"App-main\">\n        <Clock />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}